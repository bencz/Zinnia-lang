using System

namespace Internals
    public enum DecodedDoubleType : byte
        NaN
        Infinite
        Finite

    public struct DecodedDouble
        public DecodedDoubleType Type
        public bool Sign
        public short Shift
        public ulong Mantissa
        
        public DecodedDouble(DecodedDoubleType Type, bool Sign, short Shift, ulong Mantissa)
            this.Type = Type
            this.Sign = Sign
            this.Shift = Shift
            this.Mantissa = Mantissa
        
        public DecodedDouble(bool Sign, short Shift, ulong Mantissa)
            this.Type = DecodedDoubleType.Finite
            this.Sign = Sign
            this.Shift = Shift
            this.Mantissa = Mantissa
        
        public DecodedDouble(double a)
            var Val = reinterpret_cast<ulong>(a)
            this.Sign = Val & $8000000000000000 != 0
            
            if Math.IsNaN(a)
                this.Type = DecodedDoubleType.NaN
                this.Shift = 0
                this.Mantissa = 0
            else if Math.IsInfinite(a)
                this.Type = DecodedDoubleType.Infinite
                this.Shift = 0
                this.Mantissa = 0
            else
                this.Type = DecodedDoubleType.Finite
                this.Mantissa = Val & DOUBLE_MANTISSA | DOUBLE_EXPONENT_FIRST_BIT
                this.Shift = ((Val & DOUBLE_EXPONENT) >> 52 to short) - 1075
                
        public double ToDouble()
            if Type == DecodedDoubleType.NaN
                return Math.NaN
            else if Type == DecodedDoubleType.Infinite
                return if Sign: -Math.Infinite else Math.Infinite
            else if Type == DecodedDoubleType.Finite
                var l_Mantissa = Mantissa
                var l_Shift = Shift
                
                while l_Mantissa > DOUBLE_MANTISSA
                    l_Mantissa >>= 1
                    l_Shift++
                
                while l_Mantissa & DOUBLE_EXPONENT_FIRST_BIT == 0
                    l_Mantissa <<= 1
                    l_Shift--
                    
                if l_Shift < -1022: return -Math.Infinite
                if l_Shift > 1023: return Math.Infinite
                
                var Ret = l_Mantissa & ~(DOUBLE_EXPONENT_FIRST_BIT to ulong)
                Ret |= (l_Shift + 1075 to ulong) << 52
                if Sign: Ret |= $8000000000000000
                return reinterpret_cast<double>(Ret)
            else
                throw new ApplicationException()